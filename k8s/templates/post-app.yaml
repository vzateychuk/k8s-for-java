apiVersion: v1
kind: Service
metadata:
  name: post-{{ .Release.Name }}
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  selector:
    app: post-{{ .Release.Name }}
  ports:
    - name: http
      port: 20082
      targetPort: 8080
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: post-{{ .Release.Name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: post-{{ .Release.Name }}
    owner: vzateychuk
spec:
  selector:
    matchLabels:
      app: post-{{ .Release.Name }}
  replicas: {{ .Values.post.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: post-{{ .Release.Name }}
        owner: vzateychuk
    spec:
      initContainers:
        # Checking if the dataBase ready to accept connections
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: post-cfg
                  key: postdb_host
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: post-cfg
                  key: postdb_port
          command: ['sh', '-c',
            'until pg_isready -h $DB_HOST -p $DB_PORT; 
            do echo waiting for database; sleep 2; done;']
      containers:
        - name: post-service
          image: {{ .Values.post.image }}
          ports:
            - containerPort: 8080
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: post-cfg    # The ConfigMap this value comes from
                  key: postdb_host # The key to fetch
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: post-cfg
                  key: postdb_port
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: post-cfg
                  key: post_db_name
            - name: DB_LOGIN
              valueFrom:
                secretKeyRef:
                  name: post-secret
                  key: username
            - name: DB_PWD
              valueFrom:
                secretKeyRef:
                  name: post-secret
                  key: password
            - name: USER_SERVICE_API
              value: http://host.docker.internal:30081